<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List 
    	java.util.Map		
	" 
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;

    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();
    String host = ElementParameterParser.getValue(node,"__HOST__");
    String port = ElementParameterParser.getValue(node,"__PORT__");
    String from = ElementParameterParser.getValue(node,"__FROM__");
    String to = ElementParameterParser.getValue(node,"__TO__"); 
    String keyspace = ElementParameterParser.getValue(node,"__KEY_SPACE__"); 
    String drain = ElementParameterParser.getValue(node,"__DRAIN__"); 
    String limit = ElementParameterParser.getValue(node,"__LIMIT__");    
    boolean useExistingConnection = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
%>
		me.prettyprint.hector.api.Cluster cluster_<%=cid%> = null;
<%
	if (useExistingConnection){
		String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
%>
		cluster_<%=cid%>=(me.prettyprint.hector.api.Cluster)globalMap.get("cluster_<%=connection%>");
<%
	}else{
%>
		String hostIps_<%=cid%>=<%=host%>+":"+<%=port%>;
		cluster_<%=cid%> = me.prettyprint.hector.api.factory.HFactory.getOrCreateCluster("cluster", hostIps_<%=cid%>);
<%
	}
%>
		
		it.proximacentauri.ienergy.dao.cassandra.CassandraDaoImpl dao_<%=cid%> = new it.proximacentauri.ienergy.dao.cassandra.CassandraDaoImpl(cluster_<%=cid%>);
		dao_<%=cid%>.setKeyspace(<%=keyspace%>);
		dao_<%=cid%>.setEnableHoursTimeline(true);
		
		java.text.SimpleDateFormat formatter<%=cid%> = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
		java.util.Date from_<%=cid%> = formatter<%=cid%>.parse(<%=from%>); 
		java.util.Date to_<%=cid%> = formatter<%=cid%>.parse(<%=to%>); 
		
		final List<it.proximacentauri.ienergy.domain.Survey> result_<%=cid%> = dao_<%=cid%>.load(<%=drain%>, from_<%=cid%>, to_<%=cid%>, java.lang.Integer.parseInt(<%=limit%>), 0, false);
	
		for (it.proximacentauri.ienergy.domain.Survey survey : result_<%=cid%>) {
